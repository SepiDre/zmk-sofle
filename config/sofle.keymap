 /*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * NEO 2
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define NEOWIN 0
#define NUM 1
#define SYM 2
#define GME 3
#define ADJ 4
#define WEA 5


/ {

   // Activate ADJUST layer by pressing raise and lower
    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_layer {
            if-layers = <SYM NUM>;
            then-layer = <ADJ>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        neowin_layer {
// ---------------------------------------------------------------------------------------------------
// |     ^     |  1  |  2  |  3  |  4  |   5   |        /**/       |      6      | 7 | 8 | 9 | 0 | ` |
// |    ESC    |  X  |  V  |  L  |  C  |   W   |        /**/       |      K      | H | G | F | Q | ß |
// | SHIFT/TAB |  U  |  I  |  A  |  E  |   O   |        /**/       |      S      | N | R | T | D | Y |
// |    CTRL   |  Ü  |  Ö  |  Ä  |  P  |   Z   | MUTE | /**/ |     |      B      | M | , | . | J | - |
//                   | GUI |     | ALT | SPACE | NUM  | /**/ | SYM | SHIFT/ENTER |   |   |   |
            bindings = <
&kp CARET      &kp N1 &kp N2   &kp N3 &kp N4   &kp N5               /**/         &kp N6         &kp N7 &kp N8    &kp N9  &kp N0 &kp GRAVE
&kp ESC        &kp X  &kp V    &kp L  &kp C    &kp W                /**/         &kp K          &kp H  &kp G     &kp F   &kp Q  &none
&mt LSHIFT TAB &kp U  &kp I    &kp A  &kp E    &kp O                /**/         &kp S          &kp N  &kp R     &kp T   &kp D  &kp Y
&kp LCTRL      &none  &none    &none  &kp P    &kp Z     &kp C_MUTE /**/ &none   &kp B          &kp M  &kp COMMA &kp DOT &kp J  &kp MINUS
                      &kp LGUI &none  &kp LALT &kp SPACE &mo NUM    /**/ &mo SYM &mt LSHIFT RET &none  &none     &none
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        num_layer {
// ---------------------------------------------------------------------------------------------------------------
// |     |         |       |      |       |           |       /**/       | BACKTAB |  *  |  /  |     |  | NUMLock |
// | TRA | PAGE_UP |  BSPC |  UP  |  DEL  | PAGE_DOWN |       /**/       |    7    |  8  |  9  |  -  |  |         |
// | TAB |  HOME   |  LEFT | DOWN | RIGHT |    END    |       /**/       |    4    |  5  |  6  |  +  |  |         |
// | TRA |  REDO   |       |  INS |  RET  |    UNDO   | TRA | /**/ | TRA |    1    |  2  |  3  |  .  |  |         |
//                 |  TRA  |  TRA |  TRA  |    TRA    | TRA | /**/ | TRA |   TRA   |  0  | ,   | TRA |
            bindings = <
&none   &none       &none    &none    &none     &none            /**/        &kp LS(TAB) &kp KP_MULTIPLY &kp KP_DIVIDE &none        &none &kp LNLCK 
&trans  &kp PAGE_UP &kp BSPC &kp UP   &kp DEL   &kp PAGE_DOWN    /**/        &kp KP_N7   &kp KP_N8       &kp KP_N9     &kp KP_MINUS &none &none
&kp TAB &kp HOME    &kp LEFT &kp DOWN &kp RIGHT &kp END          /**/        &kp KP_N4   &kp KP_N5       &kp KP_N6     &kp KP_PLUS  &none &none
&trans  &kp LC(Y)   &none    &kp INS  &kp RET   &kp LC(Z) &trans /**/ &trans &kp KP_N1   &kp KP_N2       &kp KP_N3     &kp KP_DOT   &none &none
                    &trans   &trans   &trans    &trans    &trans /**/ &trans &trans      &kp KP_N0       &kp KP_COMMA  &trans
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        sym_layer {
// ------------------------------------------------------------------------------------------------------------
// | F1  | F2 | F3  | F4  | F5  | F6  |       /**/       | F7  | F8  | F9  | F10 | F11 | F12 |
// | TRA | @  |  _  |  [  |  ]  |  ^  |       /**/       |  !  |  <  |  >  |  =  |  &  |     |
// | TRA | \  |  /  |  {  |  }  |  *  |       /**/       |  ?  |  (  |  )  |  -  |  :  |     |
// | TRA | #  |  $  |  |  |  ~  |  `  | TRA | /**/ | TRA |  +  |  %  |  "  |  '  |  ;  | GME |
//            | TRA | TRA | TRA | TRA | TRA | /**/ | TRA | TRA | TRA | TRA | TRA |
            bindings = <
&kp F1 &kp F2        &kp F3         &kp F4   &kp F5    &kp F6           /**/         &kp F7    &kp F8      &kp F9             &kp F10           &kp F11   &kp F12
&trans &kp AT_SIGN   &kp UNDERSCORE &kp LBKT &kp RBKT  &kp CARET        /**/         &kp EXCL  &kp LT      &kp GT             &kp EQUAL         &kp AMPS  &none
&trans &kp BACKSLASH &kp SLASH      &kp LBRC &kp RBRC  &kp STAR         /**/         &kp QMARK &kp LPAR    &kp RPAR           &kp MINUS         &kp COLON &none
&trans &kp HASH      &kp DOLLAR     &kp PIPE &kp TILDE &kp GRAVE &trans /**/ &trans  &kp PLUS  &kp PERCENT &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp SEMI  &tog GME
                     &trans         &trans   &trans    &trans    &trans /**/ &trans  &trans    &trans      &trans             &trans
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        gme_layer {
// ---------------------------------------------------------------------------------------------------
// |  ^    |  1  |  2  |  3  |  4  |   5   |        /**/       |      6      | 7 | 8 | 9 | 0 | ` |
// | ESC   |  X  |  V  |  L  |  C  |   W   |        /**/       |      K      | H | G | F | Q | ß |
// | SHIFT |  U  |  I  |  A  |  E  |   O   |        /**/       |      S      | N | R | T | D | Y |
// | CTRL  |  ,  |  .  |  -  |  P  |   Z   | MUTE | /**/ |     |      B      | M | , | . | J | - |
//               | GUI |     | ALT | SPACE | NUM  | /**/ | SYM | SHIFT/ENTER |   |   |   |
            bindings = <
&kp CARET  &kp N1    &kp N2  &kp N3    &kp N4   &kp N5               /**/         &kp N6  &kp N7   &kp N8    &kp N9  &kp N0 &kp GRAVE
&kp ESC    &kp X     &kp V   &kp L     &kp C    &kp W                /**/         &kp K   &kp H    &kp G     &kp F   &kp Q  &none
&kp LSHIFT &kp U     &kp I   &kp A     &kp E    &kp O                /**/         &kp S   &kp N    &kp R     &kp T   &kp D  &kp Y
&kp LCTRL  &kp COMMA &kp DOT &kp MINUS &kp P    &kp Z     &kp C_MUTE /**/ &none   &kp B   &kp M    &kp COMMA &kp DOT &kp J  &kp MINUS
                     &none   &none     &kp TAB  &kp SPACE &mo WEA    /**/ &mo SYM &kp RET &kp LALT &none     &none
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        adj_layer {
// ------------------------------------------------------------------------------------------------------------
// |BTCLR | BT1   | BT2   |  BT3  |  BT4  |  BT5  |                |      |      |       |      |       |       |
// |      |RGB_HUD|RGB_HUI|RGB_SAD|RGB_SAI|RGB_EFF|                |      |      |       |      |       |       |
// |      |RGB_BRD|RGB_BRI|       |       |       |                |      |      |       |      |       |       |
// |      |       |       |       |       |       |RGB_TOG| |EXTPWR|      |      |       |      |       |       |
//                |       |       |       |       |       | |      |      |      |       |      |
            bindings = <
&bt BT_CLR &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                                                     &none &none &none &none &none &none
&none      &rgb_ug RGB_HUD &rgb_ug RGB_HUI &rgb_ug RGB_SAD &rgb_ug RGB_SAI &rgb_ug RGB_EFF                                                  &none &none &none &none &none &none
&none      &rgb_ug RGB_BRD &rgb_ug RGB_BRI &none           &none           &none                                                            &none &none &none &none &none &none
&none      &none           &none           &none           &none           &none           &rgb_ug RGB_TOG  &ext_power EXT_POWER_TOGGLE_CMD &none &none &none &none &none &none
                           &none           &none           &none           &none           &none            &none                           &none &none &none &none
        >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        wea_layer {
// ---------------------------------------------------------------------------------------------------
// |   ^   |  1  |  2  |  3  |  4  |   5   |        /**/       |      6      | 7 | 8 | 9 | 0 | ` |
// |  ESC  |  X  |  V  |  L  |  C  |   W   |        /**/       |      K      | H | G | F | Q | ß |
// | SHIFT |  U  |  I  |  A  |  E  |   O   |        /**/       |      S      | N | R | T | D | Y |
// |  CTRL |  ,  |  .  |  -  |  P  |   Z   | MUTE | /**/ |     |      B      | M | , | . | J | - |
//               | GUI |     | ALT | SPACE | NUM  | /**/ | SYM | SHIFT/ENTER |   |   |   |
            bindings = <
&trans  &trans &trans &trans &trans &trans            /**/        &trans  &trans &trans &trans &trans &trans
&trans  &kp K  &kp H  &kp G  &kp Q  &kp W             /**/        &trans  &trans &trans &trans &trans &trans
&trans  &kp S  &kp N  &kp R  &kp D  &kp O             /**/        &trans  &trans &trans &trans &trans &trans
&trans  &kp B  &kp M  &kp Y  &none  &kp J  &trans  /**/ &trans  &trans  &trans &trans &trans &trans &trans
               &none  &none  &trans &trans &trans /**/ &trans &trans  &trans &trans &trans
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};



/*
{
	  [_NEO] = LAYOUT(
      LT(_MULTI, KC_ESC), DE_X,   DE_V,   DE_L,   DE_C,   DE_W,                    DE_K, DE_H, DE_G,    DE_F,   DE_Q, DE_SS,
      LSFT_T(KC_TAB),     DE_U,   DE_I,   DE_A,   DE_E,   DE_O,                    DE_S, DE_N, DE_R,    DE_T,   DE_D, DE_Y,
      KC_LCTRL,           DE_UE,  DE_OE,  DE_AE,  DE_P,   DE_Z,                    DE_B, DE_M, DE_COMM, DE_DOT, DE_J, DE_MINS,
                                           KC_LEAD, KC_SPC, MO(_NUM),        MO(_SYM), LSFT_T(KC_ENT), LALT_T(KC_LGUI)
    ),
	  [_NEOMAC] = LAYOUT(
      LT(_MULTI, KC_ESC), DE_X,   DE_V,   DE_L,   DE_C,   DE_W,                    DE_K, DE_H, DE_G,    DE_F,   DE_Q, DE_SS,
      LSFT_T(KC_TAB),     DE_U,   DE_I,   DE_A,   DE_E,   DE_O,                    DE_S, DE_N, DE_R,    DE_T,   DE_D, DE_Y,
      KC_LCTRL,           DE_UE,  DE_OE,  DE_AE,  DE_P,   DE_Z,                    DE_B, DE_M, DE_COMM, DE_DOT, DE_J, DE_MINS,
                                           KC_LGUI, KC_SPC, MO(_NUM),        MO(_SYM), LSFT_T(KC_ENT), KC_LALT
    ),
      [_NUM] = LAYOUT(
      KC_ESC,     KC_HOME,  KC_BSPC,   KC_UP,    KC_DEL,   KC_END,                       KC_PAST, KC_7, KC_8, KC_9, KC_PMNS, KC_PEQL,
      KC_ENT,     KC_UNDO,  KC_LEFT,   KC_DOWN,  KC_RIGHT, KC_PGUP,                      KC_PSLS, KC_4, KC_5, KC_6, KC_PPLS, DE_Y,
      LCTL(KC_S), KC_AGAIN, LCA(DE_R), S(KC_F5), KC_F12,   KC_PGDOWN,                    KC_0,    KC_1, KC_2, KC_3, KC_PDOT, KC_PCMM,
                                                   KC_F2, KC_SPC, MO(_NUM),        MO(_SYM), LSFT_T(KC_ENT), LALT_T(KC_PGDN)
    ),
      [_SYM] = LAYOUT(
      KC_ESC,     DE_AT,   DE_UNDS, DE_LBRC, DE_RBRC, DE_CIRC,                    DE_EXLM, DE_LABK, DE_RABK, DE_EQL,  DE_AMPR, DE_SECT,
      LCTL(KC_Z), DE_BSLS, DE_SLSH, DE_LCBR, DE_RCBR, DE_ASTR,                    DE_QUES, DE_LPRN, DE_RPRN, DE_MINS, DE_COLN, DE_EURO,
      LCTL(KC_S), DE_HASH, DE_DLR,  DE_PIPE, DE_TILD, DE_GRV,                     DE_PLUS, DE_PERC, DE_DQUO, DE_QUOT, DE_SCLN, TG(_GAME),
                                   LCA_T(KC_DEL), _______, MO(_NUM),        MO(_SYM), LSFT_T(KC_ENT), LALT_T(KC_PGDN)
    ),
	  [_MULTI] = LAYOUT(
      _______, KC_LGUI, _______, KC_1, KC_2, KC_3,                    KC_F1,   KC_F2,   KC_F3,   KC_F4,    KC_F5,       KC_F6,
      KC_TAB,  _______, _______, KC_4, KC_5, KC_6,                    KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,      KC_F12,
      KC_MSEL, _______, KC_0,    KC_7, KC_8, KC_9,                    KC_PGUP, KC_PGDN, _______, TG(_NEO), TG(_NEOMAC), TG(_GAME),
                              KC_MPRV, KC_MPLY, KC_MNXT,        _______, _______, EEP_RST
    ),
	  [_GAME] = LAYOUT(
      KC_ESC,  DE_X,    DE_V,   DE_L,  DE_C,   DE_W,                    DE_K, DE_H, DE_G,    DE_F,   DE_Q, DE_SS,
      KC_LSFT, DE_U,    DE_I,   DE_A,  DE_E,   DE_O,                    DE_S, DE_N, DE_R,    DE_T,   DE_D, DE_Y,
      KC_LCTL, DE_COMM, DE_DOT, DE_D,  DE_P,   DE_Z,                    DE_B, DE_M, DE_COMM, DE_DOT, DE_J, DE_MINS,
                              KC_TAB, KC_SPC, MO(_WEAPON),        MO(_SYM), KC_ENT, KC_LALT
    ),
	  [_WEAPON] = LAYOUT(
      LT(_MULTI, KC_ESC), KC_1,    KC_2,    KC_3, KC_4, KC_5,                    KC_F1,   KC_F2,   KC_F3, KC_F4,  KC_F5,   KC_F6,
      KC_TAB,             KC_LSFT, KC_6,    KC_S, KC_7, KC_8,                    KC_F7,   KC_F8,   KC_F9, KC_F10, KC_F11,  KC_F12,
      _______,            KC_LALT, DE_MINS, KC_X, DE_9, DE_0,                    KC_PGUP, KC_PGDN, DE_B,  DE_M,   EEP_RST, TG(_GAME),
                                         _______, _______, _______,        KC_ENT, KC_SPC, KC_LALT
    ),
      [_ADJ] = LAYOUT(
      KC_SYSTEM_WAKE, _______,  _______,  KC_SLCK, _______,   _______,                    RGB_TOG, RGB_HUI, RGB_SAI, RGB_VAI, RGB_MOD,  HIBER,
      KC_F7,          KC_F8,    KC_F9,    KC_F10,  KC_F11,    KC_F12,                     _______, RGB_HUD, RGB_SAD, RGB_VAD, RGB_RMOD, _______,
      KC_F1,          KC_F2,    KC_F3,    KC_F4,   KC_F5,     KC_F6,                      _______, _______, DE_COMM, DE_DOT,  _______,  _______,
                                          LGUI_T(KC_PGUP), KC_SPC, MO(_NUM),        MO(_SYM), KC_ENT, LALT_T(KC_PGDN)
    )
    */